/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: proto/book.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class BookListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        page?: number;
        pageSize?: number;
        bookName?: string;
        tags?: string[];
        priceUpperbound?: number;
        priceLowerbound?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
            if ("bookName" in data && data.bookName != undefined) {
                this.bookName = data.bookName;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
            if ("priceUpperbound" in data && data.priceUpperbound != undefined) {
                this.priceUpperbound = data.priceUpperbound;
            }
            if ("priceLowerbound" in data && data.priceLowerbound != undefined) {
                this.priceLowerbound = data.priceLowerbound;
            }
        }
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get bookName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set bookName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
    }
    set tags(value: string[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get priceUpperbound() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set priceUpperbound(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get priceLowerbound() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set priceLowerbound(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        page?: number;
        pageSize?: number;
        bookName?: string;
        tags?: string[];
        priceUpperbound?: number;
        priceLowerbound?: number;
    }): BookListRequest {
        const message = new BookListRequest({});
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        if (data.bookName != null) {
            message.bookName = data.bookName;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        if (data.priceUpperbound != null) {
            message.priceUpperbound = data.priceUpperbound;
        }
        if (data.priceLowerbound != null) {
            message.priceLowerbound = data.priceLowerbound;
        }
        return message;
    }
    toObject() {
        const data: {
            page?: number;
            pageSize?: number;
            bookName?: string;
            tags?: string[];
            priceUpperbound?: number;
            priceLowerbound?: number;
        } = {};
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        if (this.bookName != null) {
            data.bookName = this.bookName;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        if (this.priceUpperbound != null) {
            data.priceUpperbound = this.priceUpperbound;
        }
        if (this.priceLowerbound != null) {
            data.priceLowerbound = this.priceLowerbound;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.page != 0)
            writer.writeInt32(1, this.page);
        if (this.pageSize != 0)
            writer.writeInt32(2, this.pageSize);
        if (this.bookName.length)
            writer.writeString(3, this.bookName);
        if (this.tags.length)
            writer.writeRepeatedString(4, this.tags);
        if (this.priceUpperbound != 0)
            writer.writeInt32(5, this.priceUpperbound);
        if (this.priceLowerbound != 0)
            writer.writeInt32(6, this.priceLowerbound);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BookListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BookListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.page = reader.readInt32();
                    break;
                case 2:
                    message.pageSize = reader.readInt32();
                    break;
                case 3:
                    message.bookName = reader.readString();
                    break;
                case 4:
                    pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                    break;
                case 5:
                    message.priceUpperbound = reader.readInt32();
                    break;
                case 6:
                    message.priceLowerbound = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BookListRequest {
        return BookListRequest.deserialize(bytes);
    }
}
export class Book extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ID?: string;
        name?: string;
        price?: number;
        remainNumber?: number;
        tags?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ID" in data && data.ID != undefined) {
                this.ID = data.ID;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
            if ("remainNumber" in data && data.remainNumber != undefined) {
                this.remainNumber = data.remainNumber;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
        }
    }
    get ID() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get remainNumber() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set remainNumber(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
    }
    set tags(value: string[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        ID?: string;
        name?: string;
        price?: number;
        remainNumber?: number;
        tags?: string[];
    }): Book {
        const message = new Book({});
        if (data.ID != null) {
            message.ID = data.ID;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        if (data.remainNumber != null) {
            message.remainNumber = data.remainNumber;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        return message;
    }
    toObject() {
        const data: {
            ID?: string;
            name?: string;
            price?: number;
            remainNumber?: number;
            tags?: string[];
        } = {};
        if (this.ID != null) {
            data.ID = this.ID;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        if (this.remainNumber != null) {
            data.remainNumber = this.remainNumber;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ID.length)
            writer.writeString(1, this.ID);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.price != 0)
            writer.writeInt32(3, this.price);
        if (this.remainNumber != 0)
            writer.writeInt32(4, this.remainNumber);
        if (this.tags.length)
            writer.writeRepeatedString(5, this.tags);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Book {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Book();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ID = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.price = reader.readInt32();
                    break;
                case 4:
                    message.remainNumber = reader.readInt32();
                    break;
                case 5:
                    pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Book {
        return Book.deserialize(bytes);
    }
}
export class BookData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        totalBookNumber?: number;
        page?: number;
        pageSize?: number;
        books?: Book[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("totalBookNumber" in data && data.totalBookNumber != undefined) {
                this.totalBookNumber = data.totalBookNumber;
            }
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
            if ("books" in data && data.books != undefined) {
                this.books = data.books;
            }
        }
    }
    get totalBookNumber() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set totalBookNumber(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get books() {
        return pb_1.Message.getRepeatedWrapperField(this, Book, 4) as Book[];
    }
    set books(value: Book[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        totalBookNumber?: number;
        page?: number;
        pageSize?: number;
        books?: ReturnType<typeof Book.prototype.toObject>[];
    }): BookData {
        const message = new BookData({});
        if (data.totalBookNumber != null) {
            message.totalBookNumber = data.totalBookNumber;
        }
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        if (data.books != null) {
            message.books = data.books.map(item => Book.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            totalBookNumber?: number;
            page?: number;
            pageSize?: number;
            books?: ReturnType<typeof Book.prototype.toObject>[];
        } = {};
        if (this.totalBookNumber != null) {
            data.totalBookNumber = this.totalBookNumber;
        }
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        if (this.books != null) {
            data.books = this.books.map((item: Book) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.totalBookNumber != 0)
            writer.writeInt32(1, this.totalBookNumber);
        if (this.page != 0)
            writer.writeInt32(2, this.page);
        if (this.pageSize != 0)
            writer.writeInt32(3, this.pageSize);
        if (this.books.length)
            writer.writeRepeatedMessage(4, this.books, (item: Book) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BookData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BookData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.totalBookNumber = reader.readInt32();
                    break;
                case 2:
                    message.page = reader.readInt32();
                    break;
                case 3:
                    message.pageSize = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.books, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Book.deserialize(reader), Book));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BookData {
        return BookData.deserialize(bytes);
    }
}
export class BookListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
        bookdata?: BookData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
            if ("bookdata" in data && data.bookdata != undefined) {
                this.bookdata = data.bookdata;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get bookdata() {
        return pb_1.Message.getWrapperField(this, BookData, 2) as BookData;
    }
    set bookdata(value: BookData) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_bookdata() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        errcode?: number;
        bookdata?: ReturnType<typeof BookData.prototype.toObject>;
    }): BookListResponse {
        const message = new BookListResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        if (data.bookdata != null) {
            message.bookdata = BookData.fromObject(data.bookdata);
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
            bookdata?: ReturnType<typeof BookData.prototype.toObject>;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        if (this.bookdata != null) {
            data.bookdata = this.bookdata.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (this.has_bookdata)
            writer.writeMessage(2, this.bookdata, () => this.bookdata.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BookListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BookListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.bookdata, () => message.bookdata = BookData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BookListResponse {
        return BookListResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedBookServiceService {
    static definition = {
        bookList: {
            path: "/BookService/bookList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: BookListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => BookListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: BookListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => BookListResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract bookList(call: grpc_1.ServerUnaryCall<BookListRequest, BookListResponse>, callback: grpc_1.sendUnaryData<BookListResponse>): void;
}
export class BookServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedBookServiceService.definition, "BookService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    bookList: GrpcUnaryServiceInterface<BookListRequest, BookListResponse> = (message: BookListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BookListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BookListResponse>, callback?: grpc_1.requestCallback<BookListResponse>): grpc_1.ClientUnaryCall => {
        return super.bookList(message, metadata, options, callback);
    };
}
