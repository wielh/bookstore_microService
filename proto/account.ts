/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: proto/account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class Base extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
    }): Base {
        const message = new Base({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Base {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Base();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Base {
        return Base.deserialize(bytes);
    }
}
export class RegisterRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: Base;
        email?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, Base, 1) as Base;
    }
    set base(value: Base) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_base() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof Base.prototype.toObject>;
        email?: string;
    }): RegisterRequest {
        const message = new RegisterRequest({});
        if (data.base != null) {
            message.base = Base.fromObject(data.base);
        }
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof Base.prototype.toObject>;
            email?: string;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_base)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.email.length)
            writer.writeString(2, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = Base.deserialize(reader));
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterRequest {
        return RegisterRequest.deserialize(bytes);
    }
}
export class RegisterResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        errcode?: number;
    }): RegisterResponse {
        const message = new RegisterResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterResponse {
        return RegisterResponse.deserialize(bytes);
    }
}
export class ResendRegisterVerifyEmailRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: Base;
        email?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, Base, 1) as Base;
    }
    set base(value: Base) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_base() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof Base.prototype.toObject>;
        email?: string;
    }): ResendRegisterVerifyEmailRequest {
        const message = new ResendRegisterVerifyEmailRequest({});
        if (data.base != null) {
            message.base = Base.fromObject(data.base);
        }
        if (data.email != null) {
            message.email = data.email;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof Base.prototype.toObject>;
            email?: string;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.email != null) {
            data.email = this.email;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_base)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.email.length)
            writer.writeString(2, this.email);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendRegisterVerifyEmailRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendRegisterVerifyEmailRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = Base.deserialize(reader));
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResendRegisterVerifyEmailRequest {
        return ResendRegisterVerifyEmailRequest.deserialize(bytes);
    }
}
export class ResendRegisterVerifyEmailResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        errcode?: number;
    }): ResendRegisterVerifyEmailResponse {
        const message = new ResendRegisterVerifyEmailResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResendRegisterVerifyEmailResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResendRegisterVerifyEmailResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResendRegisterVerifyEmailResponse {
        return ResendRegisterVerifyEmailResponse.deserialize(bytes);
    }
}
export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: Base;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, Base, 1) as Base;
    }
    set base(value: Base) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_base() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        base?: ReturnType<typeof Base.prototype.toObject>;
    }): LoginRequest {
        const message = new LoginRequest({});
        if (data.base != null) {
            message.base = Base.fromObject(data.base);
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof Base.prototype.toObject>;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_base)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = Base.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
        return LoginRequest.deserialize(bytes);
    }
}
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        errcode?: number;
        token?: string;
    }): LoginResponse {
        const message = new LoginResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
            token?: string;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (this.token.length)
            writer.writeString(2, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                case 2:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
export class GooogleLoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        googleID?: string;
        googleName?: string;
        googleEmail?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("googleID" in data && data.googleID != undefined) {
                this.googleID = data.googleID;
            }
            if ("googleName" in data && data.googleName != undefined) {
                this.googleName = data.googleName;
            }
            if ("googleEmail" in data && data.googleEmail != undefined) {
                this.googleEmail = data.googleEmail;
            }
        }
    }
    get googleID() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set googleID(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get googleName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set googleName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get googleEmail() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set googleEmail(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        googleID?: string;
        googleName?: string;
        googleEmail?: string;
    }): GooogleLoginRequest {
        const message = new GooogleLoginRequest({});
        if (data.googleID != null) {
            message.googleID = data.googleID;
        }
        if (data.googleName != null) {
            message.googleName = data.googleName;
        }
        if (data.googleEmail != null) {
            message.googleEmail = data.googleEmail;
        }
        return message;
    }
    toObject() {
        const data: {
            googleID?: string;
            googleName?: string;
            googleEmail?: string;
        } = {};
        if (this.googleID != null) {
            data.googleID = this.googleID;
        }
        if (this.googleName != null) {
            data.googleName = this.googleName;
        }
        if (this.googleEmail != null) {
            data.googleEmail = this.googleEmail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.googleID.length)
            writer.writeString(1, this.googleID);
        if (this.googleName.length)
            writer.writeString(2, this.googleName);
        if (this.googleEmail.length)
            writer.writeString(3, this.googleEmail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GooogleLoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GooogleLoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.googleID = reader.readString();
                    break;
                case 2:
                    message.googleName = reader.readString();
                    break;
                case 3:
                    message.googleEmail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GooogleLoginRequest {
        return GooogleLoginRequest.deserialize(bytes);
    }
}
export class GooogleLoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        errcode?: number;
        token?: string;
    }): GooogleLoginResponse {
        const message = new GooogleLoginResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
            token?: string;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (this.token.length)
            writer.writeString(2, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GooogleLoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GooogleLoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                case 2:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GooogleLoginResponse {
        return GooogleLoginResponse.deserialize(bytes);
    }
}
export class ResetPasswordRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: Base;
        newPassword?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
            if ("newPassword" in data && data.newPassword != undefined) {
                this.newPassword = data.newPassword;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, Base, 1) as Base;
    }
    set base(value: Base) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_base() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get newPassword() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set newPassword(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        base?: ReturnType<typeof Base.prototype.toObject>;
        newPassword?: string;
    }): ResetPasswordRequest {
        const message = new ResetPasswordRequest({});
        if (data.base != null) {
            message.base = Base.fromObject(data.base);
        }
        if (data.newPassword != null) {
            message.newPassword = data.newPassword;
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof Base.prototype.toObject>;
            newPassword?: string;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        if (this.newPassword != null) {
            data.newPassword = this.newPassword;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_base)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (this.newPassword.length)
            writer.writeString(2, this.newPassword);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = Base.deserialize(reader));
                    break;
                case 2:
                    message.newPassword = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest {
        return ResetPasswordRequest.deserialize(bytes);
    }
}
export class ResetPasswordResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        errcode?: number;
    }): ResetPasswordResponse {
        const message = new ResetPasswordResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ResetPasswordResponse {
        return ResetPasswordResponse.deserialize(bytes);
    }
}
export class RegisterVerifyRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        base?: Base;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("base" in data && data.base != undefined) {
                this.base = data.base;
            }
        }
    }
    get base() {
        return pb_1.Message.getWrapperField(this, Base, 1) as Base;
    }
    set base(value: Base) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_base() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        base?: ReturnType<typeof Base.prototype.toObject>;
    }): RegisterVerifyRequest {
        const message = new RegisterVerifyRequest({});
        if (data.base != null) {
            message.base = Base.fromObject(data.base);
        }
        return message;
    }
    toObject() {
        const data: {
            base?: ReturnType<typeof Base.prototype.toObject>;
        } = {};
        if (this.base != null) {
            data.base = this.base.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_base)
            writer.writeMessage(1, this.base, () => this.base.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterVerifyRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterVerifyRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.base, () => message.base = Base.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterVerifyRequest {
        return RegisterVerifyRequest.deserialize(bytes);
    }
}
export class RegisterVerifyResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errcode" in data && data.errcode != undefined) {
                this.errcode = data.errcode;
            }
        }
    }
    get errcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        errcode?: number;
    }): RegisterVerifyResponse {
        const message = new RegisterVerifyResponse({});
        if (data.errcode != null) {
            message.errcode = data.errcode;
        }
        return message;
    }
    toObject() {
        const data: {
            errcode?: number;
        } = {};
        if (this.errcode != null) {
            data.errcode = this.errcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errcode != 0)
            writer.writeInt32(1, this.errcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterVerifyResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterVerifyResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterVerifyResponse {
        return RegisterVerifyResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedAccountServiceService {
    static definition = {
        register: {
            path: "/AccountService/register",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: RegisterResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => RegisterResponse.deserialize(new Uint8Array(bytes))
        },
        login: {
            path: "/AccountService/login",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
        },
        gooogleLogin: {
            path: "/AccountService/gooogleLogin",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GooogleLoginRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GooogleLoginRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GooogleLoginResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GooogleLoginResponse.deserialize(new Uint8Array(bytes))
        },
        resendRegisterVerifyEmail: {
            path: "/AccountService/resendRegisterVerifyEmail",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ResendRegisterVerifyEmailRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ResendRegisterVerifyEmailRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ResendRegisterVerifyEmailResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ResendRegisterVerifyEmailResponse.deserialize(new Uint8Array(bytes))
        },
        registerVerify: {
            path: "/AccountService/registerVerify",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: RegisterVerifyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => RegisterVerifyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: RegisterVerifyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => RegisterVerifyResponse.deserialize(new Uint8Array(bytes))
        },
        resetPassword: {
            path: "/AccountService/resetPassword",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ResetPasswordRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ResetPasswordRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ResetPasswordResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ResetPasswordResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract register(call: grpc_1.ServerUnaryCall<RegisterRequest, RegisterResponse>, callback: grpc_1.sendUnaryData<RegisterResponse>): void;
    abstract login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
    abstract gooogleLogin(call: grpc_1.ServerUnaryCall<GooogleLoginRequest, GooogleLoginResponse>, callback: grpc_1.sendUnaryData<GooogleLoginResponse>): void;
    abstract resendRegisterVerifyEmail(call: grpc_1.ServerUnaryCall<ResendRegisterVerifyEmailRequest, ResendRegisterVerifyEmailResponse>, callback: grpc_1.sendUnaryData<ResendRegisterVerifyEmailResponse>): void;
    abstract registerVerify(call: grpc_1.ServerUnaryCall<RegisterVerifyRequest, RegisterVerifyResponse>, callback: grpc_1.sendUnaryData<RegisterVerifyResponse>): void;
    abstract resetPassword(call: grpc_1.ServerUnaryCall<ResetPasswordRequest, ResetPasswordResponse>, callback: grpc_1.sendUnaryData<ResetPasswordResponse>): void;
}
export class AccountServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAccountServiceService.definition, "AccountService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    register: GrpcUnaryServiceInterface<RegisterRequest, RegisterResponse> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, callback?: grpc_1.requestCallback<RegisterResponse>): grpc_1.ClientUnaryCall => {
        return super.register(message, metadata, options, callback);
    };
    login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
        return super.login(message, metadata, options, callback);
    };
    gooogleLogin: GrpcUnaryServiceInterface<GooogleLoginRequest, GooogleLoginResponse> = (message: GooogleLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GooogleLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GooogleLoginResponse>, callback?: grpc_1.requestCallback<GooogleLoginResponse>): grpc_1.ClientUnaryCall => {
        return super.gooogleLogin(message, metadata, options, callback);
    };
    resendRegisterVerifyEmail: GrpcUnaryServiceInterface<ResendRegisterVerifyEmailRequest, ResendRegisterVerifyEmailResponse> = (message: ResendRegisterVerifyEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResendRegisterVerifyEmailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResendRegisterVerifyEmailResponse>, callback?: grpc_1.requestCallback<ResendRegisterVerifyEmailResponse>): grpc_1.ClientUnaryCall => {
        return super.resendRegisterVerifyEmail(message, metadata, options, callback);
    };
    registerVerify: GrpcUnaryServiceInterface<RegisterVerifyRequest, RegisterVerifyResponse> = (message: RegisterVerifyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterVerifyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterVerifyResponse>, callback?: grpc_1.requestCallback<RegisterVerifyResponse>): grpc_1.ClientUnaryCall => {
        return super.registerVerify(message, metadata, options, callback);
    };
    resetPassword: GrpcUnaryServiceInterface<ResetPasswordRequest, ResetPasswordResponse> = (message: ResetPasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, callback?: grpc_1.requestCallback<ResetPasswordResponse>): grpc_1.ClientUnaryCall => {
        return super.resetPassword(message, metadata, options, callback);
    };
}
