/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: proto/transection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ActivityRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ActivityRequest {
        const message = new ActivityRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivityRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ActivityRequest {
        return ActivityRequest.deserialize(bytes);
    }
}
export class ActivityReponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errCode?: number;
        data?: ActivityReponseData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errCode" in data && data.errCode != undefined) {
                this.errCode = data.errCode;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get errCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errCode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getRepeatedWrapperField(this, ActivityReponseData, 2) as ActivityReponseData[];
    }
    set data(value: ActivityReponseData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        errCode?: number;
        data?: ReturnType<typeof ActivityReponseData.prototype.toObject>[];
    }): ActivityReponse {
        const message = new ActivityReponse({});
        if (data.errCode != null) {
            message.errCode = data.errCode;
        }
        if (data.data != null) {
            message.data = data.data.map(item => ActivityReponseData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            errCode?: number;
            data?: ReturnType<typeof ActivityReponseData.prototype.toObject>[];
        } = {};
        if (this.errCode != null) {
            data.errCode = this.errCode;
        }
        if (this.data != null) {
            data.data = this.data.map((item: ActivityReponseData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errCode != 0)
            writer.writeInt32(1, this.errCode);
        if (this.data.length)
            writer.writeRepeatedMessage(2, this.data, (item: ActivityReponseData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityReponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivityReponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errCode = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ActivityReponseData.deserialize(reader), ActivityReponseData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ActivityReponse {
        return ActivityReponse.deserialize(bytes);
    }
}
export class ActivityReponseData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        activityType?: number;
        startDate?: number;
        endDate?: number;
        activityInfo?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("activityType" in data && data.activityType != undefined) {
                this.activityType = data.activityType;
            }
            if ("startDate" in data && data.startDate != undefined) {
                this.startDate = data.startDate;
            }
            if ("endDate" in data && data.endDate != undefined) {
                this.endDate = data.endDate;
            }
            if ("activityInfo" in data && data.activityInfo != undefined) {
                this.activityInfo = data.activityInfo;
            }
        }
    }
    get activityType() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set activityType(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get startDate() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set startDate(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get endDate() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set endDate(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get activityInfo() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set activityInfo(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        activityType?: number;
        startDate?: number;
        endDate?: number;
        activityInfo?: string;
    }): ActivityReponseData {
        const message = new ActivityReponseData({});
        if (data.activityType != null) {
            message.activityType = data.activityType;
        }
        if (data.startDate != null) {
            message.startDate = data.startDate;
        }
        if (data.endDate != null) {
            message.endDate = data.endDate;
        }
        if (data.activityInfo != null) {
            message.activityInfo = data.activityInfo;
        }
        return message;
    }
    toObject() {
        const data: {
            activityType?: number;
            startDate?: number;
            endDate?: number;
            activityInfo?: string;
        } = {};
        if (this.activityType != null) {
            data.activityType = this.activityType;
        }
        if (this.startDate != null) {
            data.startDate = this.startDate;
        }
        if (this.endDate != null) {
            data.endDate = this.endDate;
        }
        if (this.activityInfo != null) {
            data.activityInfo = this.activityInfo;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.activityType != 0)
            writer.writeInt32(1, this.activityType);
        if (this.startDate != 0)
            writer.writeInt32(2, this.startDate);
        if (this.endDate != 0)
            writer.writeInt32(3, this.endDate);
        if (this.activityInfo.length)
            writer.writeString(4, this.activityInfo);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityReponseData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActivityReponseData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.activityType = reader.readInt32();
                    break;
                case 2:
                    message.startDate = reader.readInt32();
                    break;
                case 3:
                    message.endDate = reader.readInt32();
                    break;
                case 4:
                    message.activityInfo = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ActivityReponseData {
        return ActivityReponseData.deserialize(bytes);
    }
}
export class TransectionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        userType?: number;
        activityID?: string;
        activityType?: number;
        bookInfo?: BookInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("userType" in data && data.userType != undefined) {
                this.userType = data.userType;
            }
            if ("activityID" in data && data.activityID != undefined) {
                this.activityID = data.activityID;
            }
            if ("activityType" in data && data.activityType != undefined) {
                this.activityType = data.activityType;
            }
            if ("bookInfo" in data && data.bookInfo != undefined) {
                this.bookInfo = data.bookInfo;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get userType() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set userType(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get activityID() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set activityID(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get activityType() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set activityType(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get bookInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, BookInfo, 5) as BookInfo[];
    }
    set bookInfo(value: BookInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        username?: string;
        userType?: number;
        activityID?: string;
        activityType?: number;
        bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
    }): TransectionRequest {
        const message = new TransectionRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.userType != null) {
            message.userType = data.userType;
        }
        if (data.activityID != null) {
            message.activityID = data.activityID;
        }
        if (data.activityType != null) {
            message.activityType = data.activityType;
        }
        if (data.bookInfo != null) {
            message.bookInfo = data.bookInfo.map(item => BookInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            userType?: number;
            activityID?: string;
            activityType?: number;
            bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.userType != null) {
            data.userType = this.userType;
        }
        if (this.activityID != null) {
            data.activityID = this.activityID;
        }
        if (this.activityType != null) {
            data.activityType = this.activityType;
        }
        if (this.bookInfo != null) {
            data.bookInfo = this.bookInfo.map((item: BookInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.userType != 0)
            writer.writeInt32(2, this.userType);
        if (this.activityID.length)
            writer.writeString(3, this.activityID);
        if (this.activityType != 0)
            writer.writeInt32(4, this.activityType);
        if (this.bookInfo.length)
            writer.writeRepeatedMessage(5, this.bookInfo, (item: BookInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransectionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransectionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.userType = reader.readInt32();
                    break;
                case 3:
                    message.activityID = reader.readString();
                    break;
                case 4:
                    message.activityType = reader.readInt32();
                    break;
                case 5:
                    reader.readMessage(message.bookInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 5, BookInfo.deserialize(reader), BookInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransectionRequest {
        return TransectionRequest.deserialize(bytes);
    }
}
export class BookInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bookId?: string;
        bookNumber?: number;
        price?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bookId" in data && data.bookId != undefined) {
                this.bookId = data.bookId;
            }
            if ("bookNumber" in data && data.bookNumber != undefined) {
                this.bookNumber = data.bookNumber;
            }
            if ("price" in data && data.price != undefined) {
                this.price = data.price;
            }
        }
    }
    get bookId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set bookId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get bookNumber() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set bookNumber(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get price() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set price(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        bookId?: string;
        bookNumber?: number;
        price?: number;
    }): BookInfo {
        const message = new BookInfo({});
        if (data.bookId != null) {
            message.bookId = data.bookId;
        }
        if (data.bookNumber != null) {
            message.bookNumber = data.bookNumber;
        }
        if (data.price != null) {
            message.price = data.price;
        }
        return message;
    }
    toObject() {
        const data: {
            bookId?: string;
            bookNumber?: number;
            price?: number;
        } = {};
        if (this.bookId != null) {
            data.bookId = this.bookId;
        }
        if (this.bookNumber != null) {
            data.bookNumber = this.bookNumber;
        }
        if (this.price != null) {
            data.price = this.price;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bookId.length)
            writer.writeString(1, this.bookId);
        if (this.bookNumber != 0)
            writer.writeInt32(2, this.bookNumber);
        if (this.price != 0)
            writer.writeInt32(3, this.price);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BookInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BookInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.bookId = reader.readString();
                    break;
                case 2:
                    message.bookNumber = reader.readInt32();
                    break;
                case 3:
                    message.price = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BookInfo {
        return BookInfo.deserialize(bytes);
    }
}
export class TransectionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errCode?: number;
        bookInfo?: BookInfo[];
        appliedActivityData?: ActivityReponseData;
        totalPrice?: number;
        transectionTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errCode" in data && data.errCode != undefined) {
                this.errCode = data.errCode;
            }
            if ("bookInfo" in data && data.bookInfo != undefined) {
                this.bookInfo = data.bookInfo;
            }
            if ("appliedActivityData" in data && data.appliedActivityData != undefined) {
                this.appliedActivityData = data.appliedActivityData;
            }
            if ("totalPrice" in data && data.totalPrice != undefined) {
                this.totalPrice = data.totalPrice;
            }
            if ("transectionTime" in data && data.transectionTime != undefined) {
                this.transectionTime = data.transectionTime;
            }
        }
    }
    get errCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errCode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get bookInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, BookInfo, 2) as BookInfo[];
    }
    set bookInfo(value: BookInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get appliedActivityData() {
        return pb_1.Message.getWrapperField(this, ActivityReponseData, 3) as ActivityReponseData;
    }
    set appliedActivityData(value: ActivityReponseData) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_appliedActivityData() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get totalPrice() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set totalPrice(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get transectionTime() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set transectionTime(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        errCode?: number;
        bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
        appliedActivityData?: ReturnType<typeof ActivityReponseData.prototype.toObject>;
        totalPrice?: number;
        transectionTime?: number;
    }): TransectionResponse {
        const message = new TransectionResponse({});
        if (data.errCode != null) {
            message.errCode = data.errCode;
        }
        if (data.bookInfo != null) {
            message.bookInfo = data.bookInfo.map(item => BookInfo.fromObject(item));
        }
        if (data.appliedActivityData != null) {
            message.appliedActivityData = ActivityReponseData.fromObject(data.appliedActivityData);
        }
        if (data.totalPrice != null) {
            message.totalPrice = data.totalPrice;
        }
        if (data.transectionTime != null) {
            message.transectionTime = data.transectionTime;
        }
        return message;
    }
    toObject() {
        const data: {
            errCode?: number;
            bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
            appliedActivityData?: ReturnType<typeof ActivityReponseData.prototype.toObject>;
            totalPrice?: number;
            transectionTime?: number;
        } = {};
        if (this.errCode != null) {
            data.errCode = this.errCode;
        }
        if (this.bookInfo != null) {
            data.bookInfo = this.bookInfo.map((item: BookInfo) => item.toObject());
        }
        if (this.appliedActivityData != null) {
            data.appliedActivityData = this.appliedActivityData.toObject();
        }
        if (this.totalPrice != null) {
            data.totalPrice = this.totalPrice;
        }
        if (this.transectionTime != null) {
            data.transectionTime = this.transectionTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errCode != 0)
            writer.writeInt32(1, this.errCode);
        if (this.bookInfo.length)
            writer.writeRepeatedMessage(2, this.bookInfo, (item: BookInfo) => item.serialize(writer));
        if (this.has_appliedActivityData)
            writer.writeMessage(3, this.appliedActivityData, () => this.appliedActivityData.serialize(writer));
        if (this.totalPrice != 0)
            writer.writeInt32(4, this.totalPrice);
        if (this.transectionTime != 0)
            writer.writeInt32(5, this.transectionTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransectionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransectionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errCode = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.bookInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 2, BookInfo.deserialize(reader), BookInfo));
                    break;
                case 3:
                    reader.readMessage(message.appliedActivityData, () => message.appliedActivityData = ActivityReponseData.deserialize(reader));
                    break;
                case 4:
                    message.totalPrice = reader.readInt32();
                    break;
                case 5:
                    message.transectionTime = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransectionResponse {
        return TransectionResponse.deserialize(bytes);
    }
}
export class TransectionRecordRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        accountType?: number;
        page?: number;
        pageSize?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("accountType" in data && data.accountType != undefined) {
                this.accountType = data.accountType;
            }
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
            if ("pageSize" in data && data.pageSize != undefined) {
                this.pageSize = data.pageSize;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get accountType() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set accountType(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get pageSize() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set pageSize(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        username?: string;
        accountType?: number;
        page?: number;
        pageSize?: number;
    }): TransectionRecordRequest {
        const message = new TransectionRecordRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.accountType != null) {
            message.accountType = data.accountType;
        }
        if (data.page != null) {
            message.page = data.page;
        }
        if (data.pageSize != null) {
            message.pageSize = data.pageSize;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            accountType?: number;
            page?: number;
            pageSize?: number;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.accountType != null) {
            data.accountType = this.accountType;
        }
        if (this.page != null) {
            data.page = this.page;
        }
        if (this.pageSize != null) {
            data.pageSize = this.pageSize;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.accountType != 0)
            writer.writeInt32(2, this.accountType);
        if (this.page != 0)
            writer.writeInt32(3, this.page);
        if (this.pageSize != 0)
            writer.writeInt32(4, this.pageSize);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransectionRecordRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransectionRecordRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.accountType = reader.readInt32();
                    break;
                case 3:
                    message.page = reader.readInt32();
                    break;
                case 4:
                    message.pageSize = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransectionRecordRequest {
        return TransectionRecordRequest.deserialize(bytes);
    }
}
export class TransectionRecord extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bookInfo?: BookInfo[];
        appliedActivityData?: ActivityReponseData;
        totalPrice?: number;
        transectionTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bookInfo" in data && data.bookInfo != undefined) {
                this.bookInfo = data.bookInfo;
            }
            if ("appliedActivityData" in data && data.appliedActivityData != undefined) {
                this.appliedActivityData = data.appliedActivityData;
            }
            if ("totalPrice" in data && data.totalPrice != undefined) {
                this.totalPrice = data.totalPrice;
            }
            if ("transectionTime" in data && data.transectionTime != undefined) {
                this.transectionTime = data.transectionTime;
            }
        }
    }
    get bookInfo() {
        return pb_1.Message.getRepeatedWrapperField(this, BookInfo, 1) as BookInfo[];
    }
    set bookInfo(value: BookInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get appliedActivityData() {
        return pb_1.Message.getWrapperField(this, ActivityReponseData, 2) as ActivityReponseData;
    }
    set appliedActivityData(value: ActivityReponseData) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_appliedActivityData() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get totalPrice() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set totalPrice(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get transectionTime() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set transectionTime(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
        appliedActivityData?: ReturnType<typeof ActivityReponseData.prototype.toObject>;
        totalPrice?: number;
        transectionTime?: number;
    }): TransectionRecord {
        const message = new TransectionRecord({});
        if (data.bookInfo != null) {
            message.bookInfo = data.bookInfo.map(item => BookInfo.fromObject(item));
        }
        if (data.appliedActivityData != null) {
            message.appliedActivityData = ActivityReponseData.fromObject(data.appliedActivityData);
        }
        if (data.totalPrice != null) {
            message.totalPrice = data.totalPrice;
        }
        if (data.transectionTime != null) {
            message.transectionTime = data.transectionTime;
        }
        return message;
    }
    toObject() {
        const data: {
            bookInfo?: ReturnType<typeof BookInfo.prototype.toObject>[];
            appliedActivityData?: ReturnType<typeof ActivityReponseData.prototype.toObject>;
            totalPrice?: number;
            transectionTime?: number;
        } = {};
        if (this.bookInfo != null) {
            data.bookInfo = this.bookInfo.map((item: BookInfo) => item.toObject());
        }
        if (this.appliedActivityData != null) {
            data.appliedActivityData = this.appliedActivityData.toObject();
        }
        if (this.totalPrice != null) {
            data.totalPrice = this.totalPrice;
        }
        if (this.transectionTime != null) {
            data.transectionTime = this.transectionTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.bookInfo.length)
            writer.writeRepeatedMessage(1, this.bookInfo, (item: BookInfo) => item.serialize(writer));
        if (this.has_appliedActivityData)
            writer.writeMessage(2, this.appliedActivityData, () => this.appliedActivityData.serialize(writer));
        if (this.totalPrice != 0)
            writer.writeInt32(3, this.totalPrice);
        if (this.transectionTime != 0)
            writer.writeInt32(4, this.transectionTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransectionRecord {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransectionRecord();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.bookInfo, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BookInfo.deserialize(reader), BookInfo));
                    break;
                case 2:
                    reader.readMessage(message.appliedActivityData, () => message.appliedActivityData = ActivityReponseData.deserialize(reader));
                    break;
                case 3:
                    message.totalPrice = reader.readInt32();
                    break;
                case 4:
                    message.transectionTime = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransectionRecord {
        return TransectionRecord.deserialize(bytes);
    }
}
export class TransectionRecordResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        errCode?: number;
        username?: string;
        recordNumber?: number;
        transectionRecords?: TransectionRecord[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("errCode" in data && data.errCode != undefined) {
                this.errCode = data.errCode;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("recordNumber" in data && data.recordNumber != undefined) {
                this.recordNumber = data.recordNumber;
            }
            if ("transectionRecords" in data && data.transectionRecords != undefined) {
                this.transectionRecords = data.transectionRecords;
            }
        }
    }
    get errCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set errCode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get recordNumber() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set recordNumber(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get transectionRecords() {
        return pb_1.Message.getRepeatedWrapperField(this, TransectionRecord, 4) as TransectionRecord[];
    }
    set transectionRecords(value: TransectionRecord[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        errCode?: number;
        username?: string;
        recordNumber?: number;
        transectionRecords?: ReturnType<typeof TransectionRecord.prototype.toObject>[];
    }): TransectionRecordResponse {
        const message = new TransectionRecordResponse({});
        if (data.errCode != null) {
            message.errCode = data.errCode;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.recordNumber != null) {
            message.recordNumber = data.recordNumber;
        }
        if (data.transectionRecords != null) {
            message.transectionRecords = data.transectionRecords.map(item => TransectionRecord.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            errCode?: number;
            username?: string;
            recordNumber?: number;
            transectionRecords?: ReturnType<typeof TransectionRecord.prototype.toObject>[];
        } = {};
        if (this.errCode != null) {
            data.errCode = this.errCode;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.recordNumber != null) {
            data.recordNumber = this.recordNumber;
        }
        if (this.transectionRecords != null) {
            data.transectionRecords = this.transectionRecords.map((item: TransectionRecord) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.errCode != 0)
            writer.writeInt32(1, this.errCode);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.recordNumber != 0)
            writer.writeInt32(3, this.recordNumber);
        if (this.transectionRecords.length)
            writer.writeRepeatedMessage(4, this.transectionRecords, (item: TransectionRecord) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransectionRecordResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransectionRecordResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.errCode = reader.readInt32();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    message.recordNumber = reader.readInt32();
                    break;
                case 4:
                    reader.readMessage(message.transectionRecords, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TransectionRecord.deserialize(reader), TransectionRecord));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransectionRecordResponse {
        return TransectionRecordResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedTransectionServiceService {
    static definition = {
        activityList: {
            path: "/TransectionService/activityList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ActivityRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ActivityRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ActivityReponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ActivityReponse.deserialize(new Uint8Array(bytes))
        },
        transection: {
            path: "/TransectionService/transection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: TransectionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => TransectionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TransectionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TransectionResponse.deserialize(new Uint8Array(bytes))
        },
        transectionRecord: {
            path: "/TransectionService/transectionRecord",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: TransectionRecordRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => TransectionRecordRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TransectionRecordResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TransectionRecordResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract activityList(call: grpc_1.ServerUnaryCall<ActivityRequest, ActivityReponse>, callback: grpc_1.sendUnaryData<ActivityReponse>): void;
    abstract transection(call: grpc_1.ServerUnaryCall<TransectionRequest, TransectionResponse>, callback: grpc_1.sendUnaryData<TransectionResponse>): void;
    abstract transectionRecord(call: grpc_1.ServerUnaryCall<TransectionRecordRequest, TransectionRecordResponse>, callback: grpc_1.sendUnaryData<TransectionRecordResponse>): void;
}
export class TransectionServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTransectionServiceService.definition, "TransectionService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    activityList: GrpcUnaryServiceInterface<ActivityRequest, ActivityReponse> = (message: ActivityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ActivityReponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ActivityReponse>, callback?: grpc_1.requestCallback<ActivityReponse>): grpc_1.ClientUnaryCall => {
        return super.activityList(message, metadata, options, callback);
    };
    transection: GrpcUnaryServiceInterface<TransectionRequest, TransectionResponse> = (message: TransectionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransectionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransectionResponse>, callback?: grpc_1.requestCallback<TransectionResponse>): grpc_1.ClientUnaryCall => {
        return super.transection(message, metadata, options, callback);
    };
    transectionRecord: GrpcUnaryServiceInterface<TransectionRecordRequest, TransectionRecordResponse> = (message: TransectionRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransectionRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransectionRecordResponse>, callback?: grpc_1.requestCallback<TransectionRecordResponse>): grpc_1.ClientUnaryCall => {
        return super.transectionRecord(message, metadata, options, callback);
    };
}
